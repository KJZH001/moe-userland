cache:
  paths:
  - .composer-cache/
  - bootstrap/cache/
  - vendor/
  - rr



stages:
- prepare
- build
- package

get_vars:
  stage: prepare

  script:
  - echo "CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG"
  - echo "CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH"
  - echo "CI_DEFAULT_BRANCH=$CI_DEFAULT_BRANCH"
  - echo "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE"
  - echo "CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"

install_deps:
  image: registry.daisukide.com:2083/leaf/docker-php-image:latest
  stage: prepare

  script:
  - composer install --no-dev
  - composer dump-autoload --optimize --no-dev --classmap-authoritative
  # 以下省略，因为我们已经在 Dockerfile 中安装了 RoadRunner
# - ./vendor/bin/rr get-binary
# - art octane:install --server=roadrunner



docker-build:
  image: docker:latest
  stage: build
  variables:
    GIT_CHECKOUT: "false"
  tags:
  - local
  services:
  - docker:dind
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
  # - |
  #   if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
  #     tag=""
  #     echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
  #   else
  #     tag=":$CI_COMMIT_REF_SLUG"
  #     echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
  #   fi
  - tag=":$CI_COMMIT_REF_SLUG”
  - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
  - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
  - if: $CI_COMMIT_BRANCH
    exists:
    - Dockerfile

update_chart:
  image: registry.daisukide.com:2083/ivampiresp/debian-with-tools:latest
  stage: package
  script:
  - version=$(cat .chart/Chart.yaml | yq -r ".version")
  - echo "Current version $version"
  - |
    tag=":$CI_COMMIT_REF_SLUG”
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      # tag="latest"
      channel="develop"
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      # tag="$CI_COMMIT_REF_SLUG"
      channel="stable"

      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
    newVersion=".appVersion = \"$tag\""
    yq -i "$newVersion" .chart/Chart.yaml  -y
  - helm package .chart

  - chartFileName=$(ls -a  | grep .tgz)
  - echo "Chart file name $chartFileName"
  - echo "Channel $channel"
  - echo "chart=@$chartFileName"
  - cat .chart/Chart.yaml
  - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@$chartFileName" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/$channel/charts"'
